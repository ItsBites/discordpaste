#!/usr/bin/perl -w

use strict;

# Include 'lib' so it sees our perl5i::VERSION when version checking
use lib 'inc', 'lib';
use MyBuild;

use 5.010;

my $builder = MyBuild->new(
    module_name => 'perl5i',
    license     => 'perl',
    dist_author => 'Michael G Schwern <schwern@pobox.com>',
    dist_version => "v2.13.2",

    requires => {
        'perl'                    => '5.10.0',
        'Modern::Perl'            => '1.03',
        'CLASS'                   => '1.00',
        # Windows fixes
        'Child'                   => '0.013',
        'DateTime'                => '0.47',
        'DateTime::Format::Epoch' => '0.11',
        'DateTime::TimeZone::Tzfile' => '0.002',
        # for perl5i::1
        'Module::Load'            => '0.16',
        'Text::Wrap'              => '2009.0305',
        'Try::Tiny'               => '0.02',
        # plays nice with open pragma, Debian stable version
        'autodie'                 => '2.12',
        # Needed for autodie :system
        'IPC::System::Simple' => '1.18',
        'autobox'             => '2.80',
        'autobox::Core'       => '1.0',
        parent                => '0.221',
        'File::chdir'         => '0.1002',
        # for perl5i::1
        'autobox::dump'       => '20090426',
        'autobox::List::Util' => '20090629',
        'Want'                => '0.18',
        'autovivification'    => '0.06',
        'version'             => '0.77',
        'Perl6::Caller'       => '0.100',
        "Taint::Util"         => '0.06',
        'Hash::Merge::Simple' => '0.04',
        'List::MoreUtils'     => '0.22',
        indirect              => '0.24',
        'JSON::MaybeXS'       => '1.003005',
        'YAML::Any'           => '0.70',
        'Digest::SHA'         => '5.45',
        'Digest::MD5'         => '2.36',
        'Object::ID'          => '0.1.0',
        "Devel::Declare::MethodInstaller::Simple"       => '0.006009',
        'true::VERSION'       => '0.16',
        # Various Windows fixes
        'Capture::Tiny'       => '0.32',
        # Fixes utf8 + threads (and fork emulation on Windows)
        'utf8::all'           => '0.015',
        'Carp::Fix::1_25'     => '1.000000',
        'Hash::StoredIterator' => '0.007',
        'Hash::FieldHash'     => '0.06',
        'Path::Tiny'          => '0.036',
        'Import::Into'        => '1.002003',
        'Sub::Name'           => '0',
    },
    build_requires => {
        'ExtUtils::CBuilder' => '0.26',
        'Test::More'         => '0.88',
        'Test::Warn'         => '0.11',
        'IPC::Open3'         => '0',
        'Test::Output'       => '0.16',
        'Test::Most'         => '0',        
    },
    configure_requires => {
        # MB's auto configure requires only puts it in the META.yml
        # so some CPAN shells won't see it.
        "Module::Build"      => '0.36',
    },
    recommends => {
        # Significant performance improvements
        autodie         => '2.26',
    },

    meta_merge => {
        resources => {
            repository  => 'http://github.com/evalEmpire/perl5i/tree/master',
            bugtracker  => 'http://github.com/evalEmpire/perl5i/issues',
            IRC         => "irc://irc.perl.org/#perl5i",
        },
        no_index => {
            file  => [qw(
                lib/perl5i/0/DateTime.pm
                lib/perl5i/0/ARRAY.pm
                lib/perl5i/0/DEFAULT.pm
                lib/perl5i/0/HASH.pm
                lib/perl5i/0/Meta.pm
                lib/perl5i/0/Meta/Class.pm
                lib/perl5i/0/Meta/Instance.pm
                lib/perl5i/0/SCALAR.pm
                lib/perl5i/VERSION.pm
            )],
        },
    },

    PL_files => {
        'bin/perl5i.h.PL'       => 'bin/perl5i.h',
        'bin/perl5i.bat.PL'     => 'bin/perl5i.bat',
    },

    recursive_test_files => 1,

    create_readme       => 1,
    create_license      => 1,
);

$builder->requires->{"Time::y2038"} = "20100218" if $builder->needs_y2038;

$builder->create_build_script();

#!perl -T

use strict;
use warnings;
use Test::More;

unless ( $ENV{RELEASE_TESTING} ) {
    plan( skip_all => "Author tests not required for installation" );
}

eval "use Test::CheckManifest 0.9";
plan skip_all => "Test::CheckManifest 0.9 required" if $@;
ok_manifest();

#!/usr/bin/perl

use strict;
use warnings;

use Test::Most;
use Test::FailWarnings;

use FindBin;
use JSON::PP;
use Path::Tiny qw( path );

# test that the module loads without errors
my $w;
{
    local $SIG{__WARN__} = sub { $w = shift };
    require HTTP::BrowserDetect;
}
ok( !$w, 'no warnings on require' );

my $json  = path("$FindBin::Bin/useragents.json")->slurp;
my $tests = JSON::PP->new->ascii->decode($json);

$json = path("$FindBin::Bin/more-useragents.json")->slurp;
my $more_tests = JSON::PP->new->ascii->decode($json);
$tests = { %$tests, %$more_tests };

foreach my $ua ( sort ( keys %{$tests} ) ) {

    my $test = $tests->{$ua};

    my $detected = HTTP::BrowserDetect->new($ua);
    diag( $detected->user_agent );

    foreach my $method (
        'browser', 'browser_string', 'browser_beta',
        'device', 'device_name',   'device_string', 'device_beta',
        'engine', 'engine_string', 'engine_beta',
        'language',
        'os', 'os_string', 'os_beta',
        'robot', 'robot_name', 'robot_string', 'robot_beta',
        ) {
        if ( $test->{$method} ) {
            cmp_ok(
                $detected->$method, 'eq', $test->{$method},
                "$method: $test->{$method}"
            );
        }
    }

    foreach my $method (
        qw(
        os_version
        os_major
        os_minor
        public_version
        public_major
        public_minor
        robot_version
        robot_major
        robot_minor
        version
        major
        minor
        engine_version
        engine_major
        engine_minor
        ios
        tablet
        )
        ) {

        if (    exists $test->{$method}
            and defined $test->{$method}
            and length $test->{$method} ) {
            cmp_ok(
                $detected->$method, '==', $test->{$method},
                "$method: $test->{$method}"
            );
        }
    }

    foreach my $type ( @{ $test->{match} } ) {
        ok( $detected->$type, "$type should match" );
    }

    is_deeply(
        [ sort $detected->browser_properties() ],
        [ sort @{ $test->{match} } ],
        "browser properties match"
    );

    # Test that $ua doesn't match a specific method
    foreach my $type ( @{ $test->{no_match} } ) {
        ok( !$detected->$type, "$type shouldn't match (and doesn't)" );
    }

}

my $detected = HTTP::BrowserDetect->new('Nonesuch');
diag( $detected->user_agent );

foreach my $method (
    qw(
    engine_string
    engine_version
    engine_major
    engine_minor
    device
    device_name
    gecko_version
    )
    ) {
    is_deeply(
        [ $detected->$method ],
        [undef], "$method should return undef in list context"
    );
}

done_testing();

#!/usr/bin/perl

use strict;
use warnings;

use Test::Most;
use Test::FailWarnings;

use FindBin;
use JSON::PP;
use Path::Tiny qw( path );

# test that the module loads without errors
my $w;
{
    local $SIG{__WARN__} = sub { $w = shift };
    require HTTP::BrowserDetect;
}
ok( !$w, 'no warnings on require' );

my $json  = path("$FindBin::Bin/useragents.json")->slurp;
my $tests = JSON::PP->new->ascii->decode($json);

$json = path("$FindBin::Bin/more-useragents.json")->slurp;
my $more_tests = JSON::PP->new->ascii->decode($json);
$tests = { %$tests, %$more_tests };

srand(88);    # Consistent seed for consistent results

my $N_DETECTS = 5;
my $N_TESTS   = 30;

my @detect;

my @methods = (
    qw(
        beta
        browser
        browser_properties
        browser_string
        country
        device
        device
        device_name
        device_string
        engine
        engine_beta
        engine_major
        engine_minor
        engine_string
        engine_version
        engine_major
        engine_minor
        gecko_version
        language
        major
        minor
        os
        os_beta
        os_major
        os_minor
        os_string
        os_version
        public_major
        public_minor
        public_version
        realplayer_browser
        robot_string
        version
        ), &HTTP::BrowserDetect::_all_tests()
);

foreach my $ua ( sort ( keys %{$tests} ) ) {

    my %test_results;

    diag($ua);

    for my $i ( 0 .. $N_DETECTS - 1 ) {
        $detect[$i] = HTTP::BrowserDetect->new($ua);

        for my $j ( 1 .. $N_TESTS ) {
            my $method = $methods[ int( rand(@methods) ) ];
            my $result = $detect[$i]->$method;
            if ( exists( $test_results{$method} ) ) {
                if ( !defined($result) ) {
                    ok( !defined( $test_results{$method} ), $method );
                }
                elsif ( ref($result) eq 'ARRAY' ) {
                    is_deeply( $result, $test_results{$method}, $method );
                }
                else {
                    cmp_ok( $result, 'eq', $test_results{$method}, $method );
                }
            }
            else {
                $test_results{$method} = $result;
            }
        }
    }
}

done_testing();

#!/usr/bin/env perl

use strict;
use warnings;

use HTTP::BrowserDetect;
use Test::More;
use Test::FailWarnings;

ok( my $ua = HTTP::BrowserDetect->new(undef), q{undef produces no warnings} );

done_testing();

#!/usr/bin/perl -w

# Script for adding fields to existing regression tests
#
# Recommended use:
#
# $ perl -I../lib add-field.pl useragents.json > new-useragents.json
#
# This will add a field to existing regression tests, based on what
# the code currently returns for a particular test.
#
# As currently written, this script adds the "browser" method to
# existing tests.

use strict;

use FindBin;
use JSON::PP;
use Path::Tiny qw( path );

use HTTP::BrowserDetect;

my $json_text = path( $ARGV[0] )->slurp;
my $tests     = JSON::PP->new->ascii->decode($json_text);

foreach my $ua ( sort keys %{$tests} ) {
    my $test   = $tests->{$ua};
    my $detect = HTTP::BrowserDetect->new($ua);
    foreach my $field (
        qw(browser browser_string device device_string
        engine engine_beta engine_minor engine_major engine_version
        os os_beta os_major os_minor os_version os_string
        robot robot_string
        robot_version robot_major robot_minor robot_beta)
        ) {
        no strict 'refs';

        my $field_name = $field;
        my $value      = $detect->$field;

        if ( $field_name eq 'device_string' ) {
            if ( defined( $test->{device_name} ) ) {
                $field_name = 'device_name';
            }
        }
        elsif ( $field_name eq 'robot_string' ) {
            if ( defined( $test->{robot_name} ) ) {
                $field_name = 'robot_name';
            }
        }
        elsif ( $field_name eq 'robot' ) {
            next unless $value || defined( $test->{$field_name} );
        }

        if ( defined($value) || exists( $test->{$field_name} ) ) {
            $test->{$field_name} = $value;
        }
        else {
            delete $test->{$field_name};
        }
    }
}

my $json   = JSON::PP->new->canonical->pretty;
my $output = $json->encode($tests);
print "$output\n";

#!/usr/bin/perl -w

# Script for making regression test patterns.
#
# Recommended use:
#
# $ perl -I../lib make-more-useragents.pl < /wherever/apache.log > more-useragents.json
#
# This will create a test suite based on any user agents that seem at
# all dissimilar to ones we're already testing. The answers are given
# by the same code that the test suite runs against, meaning the tests
# will start out all passing. The main usefulness is:
#
# (a) You can make -I different, getting the answers according to a
# different version of the code, and then run it against the current
# version to see what's different.
#
# (b) You can manually inspect the more-useragents.json file and see
# if there are any results in it that don't make sense.
#
# (c) Any changes in behavior in the future will cause a test failure.

use strict;

use FindBin;
use JSON::PP;
use Path::Tiny qw( path );

use HTTP::BrowserDetect;

my $json_text = path("$FindBin::Bin/useragents.json")->slurp;
my $tests     = JSON::PP->new->ascii->decode($json_text);

if (1) {
    $json_text = path("$FindBin::Bin/more-useragents.json")->slurp;
    my $more_tests = JSON::PP->new->ascii->decode($json_text);
    $tests = { %$tests, %$more_tests };
}

my %seen_tokens;

foreach my $ua ( sort keys %{$tests} ) {
    my @tokens = ( $ua =~ m{ (\w+) }g );
    foreach (@tokens) {
        $seen_tokens{$_} = 1;
    }
}

my %new_tests;

while (<>) {
    my $ua;
    my @tokens;
    if ( m{^\d+\.\d+\.\d+\.\d+} || m{^\w+\:\w*\:\w*\:} ) {

        # Apache log format, match tokens and get the user agent
        @tokens = (
            $_ =~ m{ ( \"  [^\"]*       \"   |
                           [^\[\]\"\s]+      |
                       \[  [^\[\]]*     \]   )
                    }xg
        );
        ($ua) = ( $tokens[8] =~ m{\"(.*)\"} ) or next;
        $ua =~ s/^\'(.*)\'$/$1/;
    }
    else {
        # Just a list of user agents
        chomp;
        $ua = $_;
    }
    @tokens = ( $ua =~ m{ (\w+) }xg );    # Words within the user agent
    my $added = 0;
    foreach my $word (@tokens) {
        if ( !$seen_tokens{ lc $word } && !$added ) {
            my $test = {
                match => [],
            };

            my $detect = HTTP::BrowserDetect->new($ua);

            foreach my $method (
                qw(
                browser
                browser_string
                browser_major
                browser_minor
                browser_beta
                engine
                engine_string
                engine_major
                engine_minor
                engine_beta
                os
                os_string
                os_major
                os_minor
                os_beta
                country
                language
                device
                device_string
                robot
                robot_version
                robot_beta
                robot_string )
                ) {
                my $result = $detect->$method;

                if ( defined($result) ) {
                    $test->{$method} = $result;
                }
            }

            for my $prop ( 'device', @HTTP::BrowserDetect::ALL_TESTS ) {
                if ( $detect->$prop ) {
                    push @{ $test->{match} }, $prop;
                }
            }

            $new_tests{$ua} = $test;
            $added = 1;
        }
        $seen_tokens{ lc $word } = 1;
    }
}

my $json   = JSON::PP->new->canonical->pretty;
my $output = $json->encode( \%new_tests );
print "$output\n";

#!/usr/bin/perl
# vim: set ft=perl:

use Test::More;
use SQL::Translator;
use SQL::Translator::Schema::Constants;
use Test::SQL::Translator qw(maybe_plan);

BEGIN {
    maybe_plan(31, 'SQL::Translator::Parser::Excel');
    SQL::Translator::Parser::Excel->import('parse');
}

my $tr     = SQL::Translator->new(parser => "Excel");
my $t      = $tr->translate(filename => "t/data/Excel/t.xls");
my $schema = $tr->schema;

my @tables = $schema->get_tables;
is( scalar @tables, 1, 'Parsed 1 table' );

my $table = shift @tables;
is( $table->name, 'Sheet1', 'Table name is "Sheet1"' );

my @fields = $table->get_fields;
is( scalar @fields, 7, 'Table has 7 fields' );

my $f1 = shift @fields;
is( $f1->name, 'ID', 'First field name is "ID"' );
is( lc $f1->data_type, 'integer', 'Data type is "integer"' );
is( $f1->size, 5, 'Size is "5"' );
is( $f1->is_primary_key, 1, 'Field is PK' );

my $f2 = shift @fields;
is( $f2->name, 'text', 'Second field name is "text"' );
is( lc $f2->data_type, 'char', 'Data type is "char"' );
is( $f2->size, 7, 'Size is "7"' );
is( $f2->is_primary_key, 0, 'Field is not PK' );

my $f3 = shift @fields;
is( $f3->name, 'number', 'Third field name is "number"' );
is( lc $f3->data_type, 'integer', 'Data type is "integer"' );
is( $f3->size, 1, 'Size is "1"' );
is( $f3->is_primary_key, 0, 'Field is not PK' );

my $f4 = shift @fields;
TODO: {
    eval { require Spreadsheet::ParseExcel };
       todo_skip "Bug in Spreadsheet::ParseExcel, http://rt.cpan.org/Public/Bug/Display.html?id=39892", 4
               if ( $Spreadsheet::ParseExcel::VERSION > 0.32 and $Spreadsheet::ParseExcel::VERSION < 0.41 );

       is( $f4->name, 'math', 'Fourth field name is "math"' );
       is( lc $f4->data_type, 'float', 'Data type is "float"' );
       is( $f4->size, '3,1', 'Size is "3,1"' );
       is( $f4->is_primary_key, 0, 'Field is not PK' );
}

my $f5 = shift @fields;
is( $f5->name, 'bitmap', 'Fifth field name is "bitmap"' );
is( lc $f5->data_type, 'char', 'Data type is "char"' );
is( $f5->size, 1, 'Size is "1"' );
is( $f5->is_primary_key, 0, 'Field is not PK' );

my $f6 = shift @fields;
is( $f6->name, 'today', 'Sixth field name is "today"' );
is( lc $f6->data_type, 'char', 'Data type is "CHAR"' );
is( $f6->size, 10, 'Size is "10"' );
is( $f6->is_primary_key, 0, 'Field is not PK' );

my $f7 = shift @fields;
is( $f7->name, 'silly_field_with_random_characters',
    'Seventh field name is "silly_field_with_random_characters"' );
is( lc $f7->data_type, 'char', 'Data type is "CHAR"' );
is( $f7->size, 11, 'Size is "11"' );
is( $f7->is_primary_key, 0, 'Field is not PK' );