package graffiti

import java.lang.annotation.Retention
import java.lang.annotation.RetentionPolicy

@Retention(RetentionPolicy.RUNTIME)
public @interface DataSource {
    String value()
}

package graffiti

import org.eclipse.jetty.servlet.DefaultServlet

public class Graffiti {

    static server

    static isStarted = false

    public static final welcomeFiles = []

    public static final classpath = []

    static config = [ 'port': '8080',
                      'root': 'public',
                      'datasources': [:],
                      'classpath': classpath,
                      'servlets': [],
                      'mappings': [],
                      'welcomeFiles': []]
    
    public static serve(obj) {
        obj.metaClass { mixin ContextMixin }
        obj.metaClass.methods.each { method ->
            if( method.class == org.codehaus.groovy.reflection.CachedMethod ) {

                def get = method.cachedMethod.getAnnotation(Get)
                if( get ) {
                    Graffiti.get( get.value(), { method.invoke(obj) } )
                }

                def post = method.cachedMethod.getAnnotation(Post)
                if( post ) {
                    Graffiti.post( post.value(), { method.invoke(obj) } )
                }

                def put = method.cachedMethod.getAnnotation(Put)
                if( put ) {
                    Graffiti.put( put.value(), { method.invoke(obj) } )
                }

                def delete = method.cachedMethod.getAnnotation(Delete)
                if( delete ) {
                    Graffiti.delete( delete.value(), { method.invoke(obj) } )
                }

                def dataSource = method.cachedMethod.getAnnotation(DataSource)
                if( dataSource ) {
                    config.datasources[dataSource.value()] = method.invoke(obj)
                }
            }
        }

    }

    public static serve(String path, servlet = DefaultServlet, configBlock = null) {
        config.mappings << ['path': path, 'servlet': servlet, 'configBlock': configBlock]
    }
    
    public static root(String path) {
        config.root = path
    }

    public static get(path, block) {
        register('get', path, block)
    }

    public static post(path, block) {
        register('post', path, block)
    }

    public static put(path, block) {
        register('put', path, block)
    }

    public static delete(path, block) {
        register('delete', path, block)
    }

    public static start() {
        if( !isStarted ) {
            // initialize the server
            server = new Server(config)
            server.start()
        }
    }

    private static register(method, path, block) {
        def mapping = [ 'method': method, 'path': path, 'block': block ]
        if(! isStarted ) {
            config.mappings << mapping
        } else {
            server.map(mapping)
        }
    }
}

package org.agileworks.elasticsearch.river.csv

import groovy.transform.CompileStatic
import org.agileworks.elasticsearch.river.csv.listener.FileProcessorListener

class CSVConnector implements Runnable {

    Configuration config
    FileProcessorListener listener
    FileProcessorFactory processorFactory

    CSVConnector(FileProcessorListener listener, Configuration config, FileProcessorFactory processorFactory) {
        this.listener = listener
        this.config = config
        this.processorFactory = processorFactory
    }

    @Override
    public void run() {
        processAllFiles()
    }

    @CompileStatic
    void processAllFiles() {

        while (listener.listening()) {

            File lastProcessedFile = null
            try {

                File[] files = getFiles()

                listener.log('Using configuration: {}', config)
                listener.log('Going to process files {}', files)

                listener.onBeforeProcessingStart(files)

                for (File file : files) {

                    try {

                        listener.log('Processing file {}', file.getName())

                        file = renameFile(file, '.processing')
                        lastProcessedFile = file

                        processorFactory.create(config, file, listener).process()

                        file = renameFile(file, '.imported')
                        lastProcessedFile = file

                    } catch (Exception e) {
                        listener.onErrorAndContinue(e, "Error during processing file '$file.name'. Skipping it.")
                    }
                }

                listener.onAllFileProcessed(files)

            } catch (Exception e) {

                if (lastProcessedFile != null) {
                    renameFile(lastProcessedFile, '.error')
                }

                listener.onError(e)
            }

            if (!listener.listening()) {
                return
            }
        }
    }

    @CompileStatic
    File renameFile(File file, String suffix) {

        File newFile = new File(file.getAbsolutePath() + suffix)

        if (!file.renameTo(newFile)) {
            listener.log('can\'t rename file {} to {}', file.getName(), newFile.getName())
        }

        return newFile
    }

    File[] getFiles() {

        File folder = new File(config.folderName)

        listener.log("All files in folder: " + folder.listFiles().collect { it.name })

        def filter = ['accept': { File file, String s -> s.matches(config.filenamePattern) }] as FilenameFilter

        File[] acceptedFiles = folder.listFiles(filter)

        listener.log("Accepted files: " + acceptedFiles.collect { it.name })

        return acceptedFiles
    }
}

package grails.plugin.cucumber

import org.codehaus.groovy.grails.test.GrailsTestTypeResult
import org.codehaus.groovy.grails.test.event.GrailsTestEventPublisher
import org.codehaus.groovy.grails.test.report.junit.JUnitReportsFactory
import org.codehaus.groovy.grails.test.support.GrailsTestTypeSupport
import grails.util.Environment
import cucumber.runtime.Runtime
import cucumber.runtime.DefaultSummaryPrinter
import cucumber.runtime.groovy.GroovyBackend
import cucumber.runtime.io.MultiLoader


class CucumberTestType extends GrailsTestTypeSupport {
    static final ENVIRONMENT = Environment.TEST.name
    static final CONFIG_NAME = "CucumberConfig.groovy"
    static final CONFIG_PATH = ["grails-app", "conf", CONFIG_NAME].join (File.separator)
    static final NAME = "cucumber"

    Cucumber cucumber


    CucumberTestType (String testPhase) {
        super (NAME, testPhase)
    }

    @Override
    List<String> getTestExtensions () {
        ["feature"]
    }

    @Override
    int doPrepare () {
        prepareCucumber ()
        loadFeatures ()
        countScenarios ()
    }

    @Override
    GrailsTestTypeResult doRun (GrailsTestEventPublisher eventPublisher) {
        runFeatures (eventPublisher)
    }

    @Override
    String toString () {
        NAME
    }

    private void prepareCucumber () {
        def classLoader = getTestClassLoader ()

        def multiLoader = new MultiLoader (classLoader)
        def groovyShell = new GroovyShell (classLoader, createBinding ())
        def groovyBackend = new GroovyBackend (groovyShell, multiLoader)
        def runtimeOptions = initOptions (new RuntimeOptions ())

        def runtime = new Runtime (multiLoader, classLoader, [groovyBackend], runtimeOptions)

        cucumber = new Cucumber (runtime, runtimeOptions, new DefaultSummaryPrinter ())
    }

    private RuntimeOptions initOptions (RuntimeOptions options) {
        def configObject = getConfig(buildBinding.grailsSettings.config, [
                basedir: buildBinding.basedir,
                testDirPath: buildBinding.testDirPath
            ])

        configObject.cucumber.defaultFeaturePath = featurePath ()
        configObject.cucumber.defaultGluePath = featurePath ()

        new RuntimeOptionsBuilder (configObject).init (options, buildBinding.argsMap)
        options
    }

    // called from _Events.groovy
    public List getGlueSources (def grailsConfig) {
        (getConfig(grailsConfig).cucumber.sources) ?: []
    }

    private static def getConfig(def grailsConfig, Map binding = [:]) {
        def configSlurper = new ConfigSlurper (ENVIRONMENT)
        configSlurper.setBinding (binding)

        def configReader = new ConfigReader (new File (CONFIG_PATH), configSlurper)

        if (configReader.exists ()) {
            return configReader.parse ()
        }
        else {
            return grailsConfig
        }
    }

    private Binding createBinding () {
        Map variables = buildBinding.variables.clone () as Map
        variables.remove ("metaClass")
        variables.remove ("getMetaClass")
        variables.remove ("setMetaClass")
        setAppCtx (variables)
        setFunctionalTestBaseUrl (variables)
        new Binding (variables)
    }

    private void setAppCtx (Map variables) {
        // appCtx is no longer available in the (test-app) binding since grails 2.3

        // for plugin backward compatibility we add it if possible, i.e. not forked!
        if (!forked && !variables.containsKey('appCtx')) {
            variables.put('appCtx', getApplicationContext())
        }
    }

    private void setFunctionalTestBaseUrl (Map variables) {
        // functionalBaseUrl may not be in the (test-app) binding since grails 2.3

        if (!variables.containsKey ('functionalBaseUrl')) {
            String baseUrl = buildBinding.grailsSettings.functionalTestBaseUrl
            variables.put ('functionalBaseUrl', baseUrl)
            variables.put ('functionalTestBaseUrl', baseUrl)
        }
    }

    private boolean isForked () {
        // todo should be test, but it is wrong in grails 2.3.4
        buildBinding.variables.buildSettings?.forkSettings?.run
    }

    private void loadFeatures () {
        cucumber.loadFeatures ()
    }

    private int countScenarios () {
        cucumber.countScenarios ()
    }

    private GrailsTestTypeResult runFeatures (def publisher) {
        cucumber.run (createFormatter (publisher))
    }

    private def createFormatter (def publisher) {
        def swapper = createSystemOutAndErrSwapper ()
        def factory = createJUnitReportsFactory ()

        def report = new FeatureReport (new FeatureReportHelper (factory, swapper))
        def pretty = new PrettyFormatterWrapper (new PrettyFormatterFactory ())

        new CucumberFormatter (publisher, report, pretty, pretty)
        //new DebugFormatter (System.out, pretty)
    }

    private JUnitReportsFactory createJUnitReportsFactory () {
        JUnitReportsFactory.createFromBuildBinding (buildBinding)
    }

    private String featurePath () {
        ["test", relativeSourcePath].join (File.separator)
    }
}

package no.entitas.gradle.git

import no.entitas.gradle.ReleasePluginExtension
import org.eclipse.jgit.api.Status
import org.eclipse.jgit.lib.Constants
import org.eclipse.jgit.lib.ObjectId
import org.eclipse.jgit.lib.ObjectIdRef.PeeledNonTag
import org.eclipse.jgit.lib.ObjectIdRef.PeeledTag
import org.eclipse.jgit.lib.ObjectReader
import org.eclipse.jgit.lib.Ref
import org.eclipse.jgit.lib.Ref.Storage
import org.eclipse.jgit.lib.Repository
import org.gradle.api.Project
import org.gradle.api.execution.TaskExecutionGraph
import org.gradle.api.invocation.Gradle
import org.gradle.api.logging.Logger
import org.gradle.api.plugins.ExtensionContainer
import spock.lang.Specification

/**
 * Unit test of {@link GitVersion}
 *
 * @author Stig Kleppe-Jorgensen, 2012.09.30
 */
class GitVersionTest extends Specification {
    ObjectId ID_1 = ObjectId.fromString('84f25f6c357612b9b4ff818655d128ef0f62696e')
    ObjectId ID_2 = ObjectId.fromString('b7773d13356e2f9623a8e43aaa487ab003c495dd')
    ObjectId ID_3 = ObjectId.fromString('3cf221eaf446c56f72230a410bff6c87a95afda1')

    def 'should set SNAPSHOT version for build not on release tag'() {
        when:
        def gitVersion = createVersion('tag2', ID_2, true, false)

        then:
        gitVersion.versionNumber == 'master-SNAPSHOT'
    }

    def 'should set SNAPSHOT version for build on release tag with local modifications'() {
        when:
        def gitVersion = createVersion('master-REL-1', ID_2, false, false)

        then:
        gitVersion.versionNumber == 'master-SNAPSHOT'
    }

    def 'should set release version for build on release tag without local modifications'() {
        when:
        def gitVersion = createVersion('master-REL-1', ID_1, true, false)

        then:
        gitVersion.versionNumber == 'master-REL-1'
    }

    def 'should set next release version for build with task release'() {
        when:
        def gitVersion = createVersion('master-REL-1', ID_2, true, true)

        then:
        gitVersion.versionNumber == 'master-REL-2'
    }

    def createVersion(String tagName, ObjectId headId, boolean clean, boolean hasTaskReleasePrepare) {
        def gitVersion = new GitVersion(mockForProject(), mockForRepository(tagName, headId)) {
            @Override
            def workDirStatus(Repository repository) {
               null
            }

            @Override
            boolean branchIsAheadOfRemote() {
                false
            }

            @Override
            def getLatestReleaseTag(String currentBranch) {
                'master-REL-1'
            }
        }

        def mockStatus = Mock(Status)
        mockStatus.clean >> clean
        gitVersion.status = mockStatus

        gitVersion.setup(mockForTaskGraph(hasTaskReleasePrepare))
        gitVersion
    }

    Repository mockForRepository(def tagName, ObjectId headId) {
        Mock(Repository).with { repository ->
            repository.getRef(Constants.HEAD) >> new PeeledNonTag(Storage.NEW, 'head', headId)
            repository.tags >> ['tag1' : tagRef('ref/tags/tag1'), "${tagName}" : tagRef("ref/tags/${tagName}")]
            repository.peel(_) >> { Ref ref -> ref }
            repository.fullBranch >> 'refs/heads/master'
            repository.newObjectReader() >> Mock(ObjectReader)
            repository
        }
    }

    PeeledTag tagRef(String tag) {
        new PeeledTag(Storage.NEW, tag, ID_3, ID_1)
    }

    Project mockForProject() {
        Mock(Project).with { project ->
            project.gradle >> mockForGradle()
            project.logger >> Mock(Logger)
            project.extensions >> mockForExtensionContainer()
            project
        }
    }

    def mockForExtensionContainer() {
        Mock(ExtensionContainer).with { ec ->
            ec.getByName(_) >> new ReleasePluginExtension()
            ec
        }
    }

    Gradle mockForGradle() {
        Mock(Gradle).with { gradle ->
            gradle.taskGraph >> Mock(TaskExecutionGraph)
            gradle
        }
    }

    TaskExecutionGraph mockForTaskGraph(boolean hasTaskReleasePrepare) {
        Mock(TaskExecutionGraph).with { taskGraph ->
            taskGraph.hasTask(_ as String) >> hasTaskReleasePrepare
            taskGraph
        }
    }
}