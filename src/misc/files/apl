∇cid←data CF_APPEND fh;r;tbl;⎕IO;i;n;data2
 ⎕IO←1
 ⎕ES((~(fh←''⍴fh)∊_CF_MAP[;1])∨(1≠⍴,fh)∨1<≡fh)/'INVALID FILE HANDLE'
 ⎕ES(0=⎕NC'data')/'MISSING DATA'
 cid←_CF_MAP[i←''⍴(fh=_CF_MAP[;1])/⍳1↑⍴_CF_MAP;3]
 tbl←⊃_CF_MAP[i;2]
 data2←14 ⎕CR data
 n←0
 LOOP:→(2000<⍴data2)/BIG∆NEW
 '→TRY∆AGAIN'⎕EA'r←(''insert into '',tbl,'' (ikey, sdata) values (?, ?);'')SQL∆Exec[_CF_DB] cid data2'
 _CF_MAP[i;3]←cid+1
 →0
 BIG∆NEW:'→TRY∆AGAIN'⎕EA'r←(''insert into '',tbl,'' (ikey, ldata) values (?, ?);'')SQL∆Exec[_CF_DB] cid data2'
 _CF_MAP[i;3]←cid+1
 →0
 ⍝ It is possible that some other application appended a new component and our max is out-of-sync.
 ⍝ Update component ID and try again.
 TRY∆AGAIN:⎕ES(_CF_MAX_TRIES<n←n+1)/'APPEND ERROR'
 cid←_CF_NEXT tbl
 →LOOP
∇

∇r←CF_CLOSE fhl;⎕IO
 ⎕IO←1
 ⎕ES((∨/~(,fhl)∊_CF_MAP[;1])∨(0≠1↑0⍴fhl)∨1<≡fhl)/'INVALID FILE HANDLE'
 _CF_MAP←(~_CF_MAP[;1]∊fhl)⌿_CF_MAP
 r←0 0⍴0
∇

∇r←CF_CREATE fnm;cmd
 ⎕ES((0=⍴,fnm)∨(' '≠1↑0⍴fnm)∨(1<⍴⍴fnm)∨1<≡fnm)/'INVALID FILE NAME'
 ⎕ES(CF_FILEEXISTS fnm)/'FILE ALREADY EXISTS'
 cmd←'CREATE TABLE ',fnm,' ('
 cmd←cmd,'ikey INTEGER NOT NULL PRIMARY KEY, '
 cmd←cmd,'sdata CHARACTER VARYING(2000),'
 cmd←cmd,'ldata text);'
 '⎕ES''CREATE TABLE ERROR'''⎕EA'r←cmd SQL∆Exec[_CF_DB] '''''
 r←'insert into _apl_component_files (file_name) values (?);' SQL∆Exec[_CF_DB] ⊂fnm
 r←_CF_ADD fnm
∇

∇type CF_DBCONNECT params
 ⍎(0=⎕NC 'SQL')/'⎕ES(''SQL''≢''lib_sql.so''⎕FX''SQL'')/''Error loading SQL library'''
 '⎕ES''DBCONNECT ERROR'''⎕EA'_CF_DB←type SQL∆Connect params'
 _CF_MAP←0 3⍴0
 _CF_MAX_TRIES←30
∇

∇type CF_DBCREATE params;cmd;db
 ⍎(0=⎕NC 'SQL')/'⎕ES(''SQL''≢''lib_sql.so''⎕FX''SQL'')/''Error loading SQL library'''
 '⎕ES''DBCONNECT ERROR'''⎕EA'db←type SQL∆Connect params'
 cmd←'create table _apl_component_files ('
 cmd←cmd,'file_name character varying (80) not null unique);'
 '⎕ES''DBCREATE ERROR'''⎕EA'cmd←cmd SQL∆Exec[db]'''''
 _CF_DB←db
 _CF_MAP←0 3⍴0
 _CF_MAX_TRIES←30
∇

∇CF_DBDISCONNECT;r;db
 db←_CF_DB
 r←⎕EX '_CF_DB'
 r←⎕EX '_CF_MAP'
 r←⎕EX '_CF_MAX_TRIES'
 '⎕ES''DISCONNECT ERROR'''⎕EA'r←SQL∆Disconnect db'
∇

∇z←CF_ERASE fnm
 ⎕ES((' '≠1↑0⍴fnm)∨(1<⍴⍴fnm)∨1<≡fnm)/'INVALID FILE NAME'
 '⎕ES''ERASE TABLE ERROR'''⎕EA'z←(''drop table '',fnm) SQL∆Exec[_CF_DB]'''''
 z←'delete from _apl_component_files where file_name=?;' SQL∆Exec[_CF_DB] ⊂fnm
 _CF_DELETE fnm
 z←0 0⍴0
∇

∇r←CF_FILEEXISTS fnm
 ⎕ES((0=⍴,fnm)∨(' '≠1↑0⍴fnm)∨(1<⍴⍴fnm)∨1<≡fnm)/'INVALID FILE NAME'
 r←(⊂,fnm)∊CF_FILES
∇

∇files←CF_FILES
 ⍝ Returns a list of component files
 files←'select file_name from _apl_component_files;' SQL∆Select[_CF_DB]''
∇

∇fhl←CF_INUSE
 fhl←_CF_MAP[;⎕IO]
∇

∇FL←CF_LIST A;w;lst
 ⎕ES((0≠+/⍴,A)∨(1≠⍴⍴A)∨1≠≡A)/'INVALID ARGUMENT'
 FL←(0,w←⌈/0,∊⍴¨lst←CF_FILES)⍴''
 lst←{FL←FL⍪w↑⍵}¨lst
∇

∇cid←CF_NEXT fh;⎕IO
 ⎕IO←1
 ⎕ES((~(fh←''⍴fh)∊_CF_MAP[;1])∨(1≠⍴,fh)∨1<≡fh)/'INVALID FILE HANDLE'
 cid←_CF_MAP[''⍴(fh=_CF_MAP[;1])/⍳1↑⍴_CF_MAP;3]
∇

∇r←fh CF_OPEN fnm;⎕IO
 ⎕IO←1
 ⎕ES((0=⍴,fnm)∨(' '≠1↑0⍴fnm)∨(1<⍴⍴fnm)∨1<≡fnm)/'INVALID FILE NAME'
 ⎕ES(~CF_FILEEXISTS fnm)/'FILE DOES NOT EXIST'
 ⍎(2≠⎕NC 'fh')/'fh←1+⌈/0,_CF_MAP[;1]'
 ⎕ES(((fh←''⍴fh)∊_CF_MAP[;1])∨(1≠⍴,fh)∨1<≡fh)/'INVALID FILE HANDLE'
 r←fh _CF_ADD fnm
∇

∇r←CF_READ cfi;⎕IO;i
 ⎕IO←1
 ⎕ES((1≠⍴⍴cfi)∨2≠⍴,cfi)/'INVALID FILE HANDLE, COMPONENT ID'
 ⎕ES((~cfi[1]∊_CF_MAP[;1])∨0≠≡cfi[1])/'INVALID FILE HANDLE'
 ⎕ES((0≠≡cfi[2])∨0≠1↑0⍴cfi[2])/'INVALID COMPONENT ID'
 ⎕ES((_CF_MAP[i←''⍴(cfi[1]=_CF_MAP[;1])/⍳1↑⍴_CF_MAP;3]≤cfi[2])∨cfi[2]<1)/'INVALID COMPONENT ID'
 r←('select sdata, ldata from ',(⊃_CF_MAP[i;2]),' where ikey=?') SQL∆Select[_CF_DB] cfi[2]
 ⎕ES(1=⍴⍴r)/'COMPONENT NOT FOUND'
 r←¯14 ⎕CR (⊃r[1]),⊃(r←,r)[2]
∇

∇z←nfnm CF_RENAME fnm;i
 ⎕ES(0=⎕NC'nfnm')/'MISSING ARGUMENT'
 ⎕ES((0=⍴,fnm)∨(' '≠1↑0⍴fnm)∨(1<⍴⍴fnm)∨1<≡fnm)/'INVALID ORIGINAL FILE NAME'
 ⎕ES((0=⍴,nfnm)∨(' '≠1↑0⍴nfnm)∨(1<⍴⍴nfnm)∨1<≡nfnm)/'INVALID NEW FILE NAME'
 ⎕ES(~CF_FILEEXISTS fnm)/'ORIGINAL FILE NAME DOES NOT EXIST'
 ⎕ES(CF_FILEEXISTS nfnm)/'NEW FILE NAME ALREADY EXISTS'
 '⎕ES''RENAME ERROR'''⎕EA'z←(''alter table '',fnm,'' rename to '',nfnm,'';'') SQL∆Exec[_CF_DB]'''''
 '⎕ES''RENAME ERROR'''⎕EA'z←''update _apl_component_files set file_name=? where file_name=?;'' SQL∆Exec[_CF_DB] nfnm fnm'
 ⍎(0≠i←_CF_FIND fnm)/'_CF_MAP[i;2]←⊂nfnm'
 z←0 0⍴0
∇

∇z←data CF_WRITE cfi;r;tbl;⎕IO;i;data2
 ⎕IO←1
 ⎕ES(0=⎕NC'data')/'MISSING DATA'
 ⎕ES((1≠⍴⍴cfi)∨2≠⍴,cfi)/'INVALID FILE HANDLE, COMPONENT ID'
 ⎕ES((~cfi[1]∊_CF_MAP[;1])∨0≠≡cfi[1])/'INVALID FILE HANDLE'
 ⎕ES((0≠≡cfi[2])∨0≠1↑0⍴cfi[2])/'INVALID COMPONENT ID'
 ⍝ The following line handles the case of another program updating the table
 ⍎(_CF_MAP[i←''⍴(cfi[1]=_CF_MAP[;1])/⍳1↑⍴_CF_MAP;3]≤cfi[2])/'_CF_MAP[i;3]←_CF_NEXT⊃_CF_MAP[i;2]'
 ⎕ES((_CF_MAP[i;3]≤cfi[2])∨cfi[2]<1)/'INVALID COMPONENT ID'
 z←0 0⍴0
 data2←14 ⎕CR data
 r←('select ikey from ',(tbl←⊃_CF_MAP[i;2]),' where ikey=?;') SQL∆Select[_CF_DB]cfi[2]
 →((1=⍴⍴r)∧0=1↑⍴r)/NEW
 →(2000<⍴data2)/BIG∆CHANGE
 '⎕ES''WRITE ERROR'''⎕EA'r←(''update '',tbl,'' set sdata=?,ldata=null where ikey=?;'')SQL∆Exec[_CF_DB] data2 cfi[2]'
 →0
 BIG∆CHANGE: '⎕ES''WRITE ERROR'''⎕EA'r←(''update '',tbl,'' set sdata=null,ldata=? where ikey=?;'')SQL∆Exec[_CF_DB] data2 cfi[2]'
 →0
 ⍝ INSERT code used to support ability to delete components in the middle
 NEW:→(2000<⍴data2)/BIG∆NEW
 '⎕ES''WRITE ERROR'''⎕EA'←(''insert into '',tbl,'' (ikey, sdata) values (?, ?);'')SQL∆Exec[_CF_DB] cfi[2] data2'
 →0
 BIG∆NEW:'⎕ES''WRITE ERROR'''⎕EA'r←(''insert into '',tbl,'' (ikey, ldata) values (?, ?);'')SQL∆Exec[_CF_DB] cfi[2] data2'
∇

∇Z←SQL∆Begin Y
 Z←SQL[5] Y
∇

∇Z←SQL∆Commit Y
 Z←SQL[6] Y
∇

∇Z←X SQL∆Connect Y
 Z←X SQL[1] Y
∇

∇Z←SQL∆Disconnect Y
 Z←SQL[2] Y
∇

∇Z←X SQL∆Exec[db] Y
 Z←X SQL[4,db] Y
∇

∇Z←SQL∆Rollback Y
 Z←SQL[7] Y
∇

∇Z←X SQL∆Select[db] Y
 Z←X SQL[3,db] Y
∇

∇Z←SQL∆Tables Y
 Z←SQL[8] Y
∇

∇Z←X (F SQL∆WithTransaction FINDDB) Y;result
 SQL∆Begin FINDDB
 →(0≠⎕NC 'X')/dyadic
 result ← '→rollback' ⎕EA 'F Y'
 →commit
 dyadic:
 result ← '→rollback' ⎕EA 'X F Y'
 commit:
 SQL∆Commit FINDDB
 Z ← result
 →end
 rollback:
 SQL∆Rollback FINDDB
 ⎕ES "Transaction rolled back"
 end:
∇

∇r←fh _CF_ADD fnm
 ⍎(2≠⎕NC 'fh')/'fh←1+⌈/0,_CF_MAP[;⎕IO]'
 _CF_MAP←_CF_MAP⍪(r←fh),(⊂fnm),_CF_NEXT fnm
∇

∇_CF_DELETE fnm;i
 →(0=1↑0⍴fnm)/HANDLE
 →(0=i←_CF_FIND fnm)/0
 _CF_MAP←(i≠⍳1↑⍴_CF_MAP)⌿_CF_MAP
 →0
 HANDLE: _CF_MAP←(fnm=_CF_MAP[;⎕IO])⌿_CF_MAP
∇

∇i←_CF_FIND fnm
 ⍝ returns the row number into _CF_MAP, 0 if unfound
 i←''⍴((⊂fnm)≡¨_CF_MAP[;⎕IO+1])/⍳1↑⍴_CF_MAP
∇

∇cid←_CF_NEXT fnm
 cid←1+''⍴1↑,⊃('select max(ikey) from ',fnm,';') SQL∆Select[_CF_DB]''
∇

⎕CT←1E¯13

⎕FC←6⍴(,⎕UCS 46 44 8902 48 95 175)

⎕IO←1

⎕L←0

⎕LX←' '
  ⎕LX←0⍴⎕LX

⎕PP←10

⎕PR←1⍴' '

⎕PS←0

⎕PW←80

⎕R←0

⎕RL←1

⎕TZ←-5

⎕X←0

:Namespace WebServer
⍝ === VARIABLES ===

HOME←''

NL←(⎕ucs 13 10)

stop←1


⍝ === End of variables definition ===

(⎕IO ⎕ML ⎕WX)←1 0 3

∇ z←FromRaw z;⎕IO
 :If 82=⊃⎕DR' '
   ⎕IO←0
   z←⎕AV[(⎕NXLATE 0)⍳8 uns z]
 :Else
   z←⎕UCS 8 uns z ⍝ 8-but unsigned integers
 :EndIf
∇

∇ r←GetAnswer(CMD BUF);URL;I;Status;Content
                    ⍝ Default file handler.
                    ⍝ Needs to return:
                    ⍝  [1] - (charvec) HTTP status code.         This can be 0 to just mean standard success.
                    ⍝  [2] - (charvec) Additional HTTP headers.  If none, just set to ''.
                    ⍝  [3] - (charvec) HTTP content.             If none, just set to ''.
 :If (⊂##.HTTPUtils.lc(I←CMD⍳' ')↑CMD)∊'get ' 'post '
   URL←I↓CMD
   URL←(¯1+URL⍳' ')↑URL
   :If 'http:'≡##.HTTPUtils.lc 5↑URL ⍝ Drop leading server address
     URL←(¯1+(+\'/'=URL)⍳3)↓URL
   :EndIf
   URL←('/'=1↑URL)↓URL
   :If 0=⍴Content←GetFile HOME,URL,(0=⍴URL)/'index.htm'
     Status←'404 File Not Found'
   :Else
     Status←0
   :EndIf
 :Else
   Status←'500 Invalid command: ',CMD ⋄ Content←''
 :EndIf
 r←Status''Content
∇

∇ R←GetFile NAME
 :Trap 0
   NAME ⎕NTIE ¯1
   R←⎕NREAD ¯1(⎕DR'A'),2↑⎕NSIZE ¯1
   ⎕NUNTIE ¯1
 :Else
   R←''
 :EndTrap
∇

∇ ns HandleRequest arg;FindFirst;obj;buf;pos;I;z;hdr;req;CMD;status;content;rarg;Answer;conns;eoh
                    ⍝ Handle a Web Server Request
     
 FindFirst←{(⍺⍷⍵)⍳1}
 conns←⍎ns ⍝ get a reference to the namespace for the connection
 obj buf←arg
 buf←FromRaw buf
     
 :If 0=conns.⎕NC'Buffer'
   conns.Buffer←⍬
 :EndIf
 conns.Buffer,←buf
 conns.Handler←{6::conns.Handler←'<env>'≡5↑conns.Buffer ⋄ conns.Handler}⍬ ⍝ are we serving as a mapping handler?
 eoh←(1+conns.Handler)⊃(NL,NL)('</env>') ⍝ end of header marker
 pos←(¯1+⍴eoh)+eoh FindFirst conns.Buffer
     
 :If pos>⍴conns.Buffer ⍝ Have we got everything ?
   :Return
 :ElseIf pos>I←(z←NL[2],'content-length:')FindFirst hdr←##.HTTPUtils.lc pos↑conns.Buffer
 :AndIf (⍴conns.Buffer)<pos+↑2⊃⎕VFI(¯1+z⍳NL[1])↑z←(¯1+I+⍴z)↓hdr
   :Return ⍝ a content-length was specified but we haven't yet gotten what it says to ==> go back for more
 :EndIf
     
 :If conns.Handler  ⍝ if we're running as a mapping handler
   (req conns.Buffer)←MakeHTTPRequest conns.Buffer ⍝ fake MiServer out by building an HTTP request from what we've got
 :Else
   req←pos↑conns.Buffer
   conns.Buffer←pos↓conns.Buffer
 :EndIf
     
     
     
 CMD←(¯1+req⍳NL[1])↑req
     
                    ⍝ The function called is reponsible for returning:
                    ⍝  [1] - (charvec) HTTP status code.         This can be 0 to just mean standard success.
                    ⍝  [2] - (charvec) Additional HTTP headers.  If none, just set to ''.
                    ⍝  [3] - (charvec) HTTP content.             If none, just set to ''.
     
 :Trap 0/0 ⍝ be sure to cover any problems during ⍎ and cover a possibly-bogus result from it
   (status hdr content)←⍎HOME,' (cmd←##.HTTPUtils.DecodeCmd req) conns'
 :Else
   ##.SAWS_Error←⎕TS ⎕LC ⎕XSI ⎕DM
   (status hdr content)←'500 Internal Server Error' '' ''
 :EndTrap
 :If status≡'200 OK' ⋄ :AndIf 1∊'text/xml'⍷hdr ⋄ content←conns.Buffer ##.ResolveNamespaces content ⋄ :EndIf
     
 rarg←req conns.Buffer ⍝ (<rarg> is for HOME to utilize, e.g. HOME≡'##.SOAP.CongaSOAP rarg'
 :If 0≡status ⋄ status←'200 OK' ⋄ :EndIf
 :If 0≠⍴hdr ⋄ hdr←(-+/∧\(⌽hdr)∊NL)↓hdr ⋄ :EndIf
 :If ##.DEBUG ##.bit 2 ⋄ :AndIf 0<⍴##.AltResponse ⋄ content←##.AltResponse ⋄ :EndIf ⍝ if directed to substitute message, do so
 :If ##.DEBUG ##.bit 1 ⋄ ##.LastRunResponse←content ⋄ :EndIf ⍝ if directed to save last transaction, do so
 :If ##.TRACE ##.bit 0
   1 ##.Output'>>> WebServer.HandleRequest <<<'
   1 ##.Output'status:  ',##.terse status~⎕UCS 10
   1 ##.Output'hdr:     ',##.terse hdr~⎕UCS 10
   1 ##.Output'content: ',##.terse content~⎕UCS 10
 :EndIf
     
 Answer←((1+conns.Handler)⊃'HTTP/1.0 ' 'Status: '),status,NL,'Content-Length: ',(⍕⍴content),NL,hdr,NL,NL
 Answer←Answer,content
     
 Answer←ToRaw Answer
 :If ~0=1⊃z←##.DRC.Send obj Answer 1 ⍝ Send response and close connection
   ##.Output'Closed socket ',obj,' due to error: ',⍕z
 :EndIf
 {}⎕EX ns ⍝ erase the namespace after the connection is closed
∇

∇ r←{path}HttpsRun arg;Common;cmd;name;port;wres;ref;nspc;sink;HOME;stop;certpath;flags;z;cert;secargs;secure;rc;objname;command;data
               ⍝ Ultra simple HTTPS (Web) Server
               ⍝ Assumes Conga available in ##.DRC
     
 :If 0=⎕NC'path' ⋄ certpath←##.Samples.CertPath,'ca' ⍝ if no certificate path specified, use sample
 :ElseIf 0∊⍴path ⋄ certpath←##.Samples.CertPath,'ca' ⍝ or if certificat path is empty, use sample
 :Else ⋄ certpath←path                          ⍝ otherwise use supplied path
 :EndIf
 certpath,←('/\'∊⍨¯1↑certpath)↓'/'
     
 {}##.DRC.Init''
 HOME port name cert flags←5↑arg,(⍴arg)↓'' 445 'HTTPSRV'(⎕NEW ##.DRC.X509Cert)0
 secure←{0::0 ⋄ 1<cert.IsCert}⍬
 secargs←⍬
 :If secure
   {}##.DRC.SetProp'.' 'RootCertDir'certpath
   secargs←('X509'cert)('SSLValidation'flags)
 :EndIf
 →(0≠1⊃r←##.DRC.Srv name''port'Raw' 10000,secure/secargs)⍴0
 ##.Output(4×secure)↓'Non-Secure Web server ''',name,''' started on port ',⍕port
 ##.Output'Handling requests using ',HOME
 Common←⎕NS'' ⋄ stop←0
 :While ~stop
   wres←##.DRC.Wait name 10000 ⍝ Tick every 10 secs
   rc objname command data←4↑wres,(⍴wres)↓0 '' '' ''
   :Select rc
   :Case 0 ⍝ Good data from RPC.Wait
     :Select command
     :Case 'Error'
       :If name≡2⊃wres ⋄ stop←1 ⋄ :EndIf
       ##.Output'Error ',(⍕4⊃wres),' on ',2⊃wres
       ⎕EX SpaceName 2⊃wres
     :CaseList 'Block' 'BlockLast'
       :If 'BlockLast'≡command
         ⎕EX nspc
       :Else ⋄ r←nspc HandleRequest&objname data ⍝ Run page handler in new thread
       :EndIf
     :Case 'Connect'
       nspc←SpaceName 2⊃wres ⋄ nspc ⎕NS''
       :If secure ⋄ (⍎nspc).PeerCert←2⊃##.DRC.GetProp(2⊃wres)'PeerCert' ⋄ :EndIf
     :Else ⋄ ##.Output'Error ',⍕wres
     :EndSelect
   :Case 100 ⍝ Time out
   :Case 1010 ⍝ Object Not found
     ##.Output'Object ''',name,''' has been closed - Web Server shutting down'
     :Return
   :Else
     ##.Output'#.DRC.Wait failed:'
     ##.Output wres
     ∘ ⍝ intentional error
   :EndSelect
   :If 0<⎕NC'##.STOP'
     :If ##.STOP≡1
       stop←1
     :EndIf
   :EndIf
 :EndWhile
 {}##.DRC.Close name
 ##.Output'Web server ''',name,''' stopped '
∇

∇ r←MakeHTTPRequest req;x;v;s;p;l;m;n;i;c;q
     ⍝ kludge to get by ampersands in a POST - will be fixed when we build proper requests from MiServerCGI

 c←''
 :If (⍴req)≥i←1⍳⍨'>tsop<'⍷⌽req
   i←(⍴req)-i+5
   c←¯13↓(i+6)↓req
   req←(i↑req),'</env>'
 :EndIf
     
 :Trap 11
   x←⎕XML req
 :Else
   ∘∘∘
 :EndTrap
 v←'var'∘≡¨x[;2]
 v←↑{⎕ML←3 ⋄ (~<\'='=⍵)⊂⍵}¨v/x[;3]
 m l p s n q←v∘{3::2⊃⍵ ⋄ ⍺[;2]⊃⍨⍺[;1]⍳⊂1⊃⍵}¨↓'REQUEST_METHOD' 'CONTENT_LENGTH' 'PATH_INFO' 'SERVER_PROTOCOL' 'SERVER_NAME' 'QUERY_STRING',[1.1]'GET' '0' '' 'HTTP/1.0' 'localhost' ''
 l←⍕⍴c
     ⍝ p←p↓⍨¯5×'.saws'≡#.SAWS.HTTPUtils.lc ¯5↑p ⍝ drop off .saws
 r←(m,' ',p,((' '∨.≠q)/'?',q),' ',s,NL,'Host: ',n,NL,'Content-Length: ',l,NL,NL)c
∇

∇ r←Run arg;HOME;port;name;Common;stop;rc;objname;command;data;nspc;wres
                    ⍝ Ultra simple HTTP (Web) Server
                    ⍝ Assumes Conga available in ##.DRC
 {}##.DRC.Init''
 HOME port name←3↑arg,(⍴arg)↓'' 8080 'HTTPSRV'
 →(0≠1⊃r←##.DRC.Srv name''port'Raw' 10000)⍴0 ⍝
 ##.Output'Web server ''',name,''' started on port ',⍕port
 ##.Output'Handling requests using ',HOME
 Common←⎕NS'' ⋄ stop←0
 :While ~stop
   wres←##.DRC.Wait name 10000 ⍝ Tick every 10 secs
   rc objname command data←4↑wres,(⍴wres)↓0 '' '' ''
   :Select rc
   :Case 0 ⍝ Good data from RPC.Wait
     :Select command
     :Case 'Error'
       :If name≡objname ⋄ stop←1 ⋄ :EndIf
       ##.Output'Error ',(⍕data),' on ',objname
       ⎕EX SpaceName objname
     :CaseList 'Block' 'BlockLast'
       :If 0=⎕NC nspc←SpaceName objname ⋄ nspc ⎕NS'' ⋄ :EndIf ⍝ create namespace for command
       :If 'BlockLast'≡command ⍝ if we got a blocklast, the connection has been closed...
         ⎕EX nspc ⍝ just cleanup the namespace
       :Else ⋄ r←nspc HandleRequest&objname data ⍝ Run page handler in new thread
       :EndIf
     :Case 'Connect' ⍝ Ignore
     :Else ⋄ ##.Output'Error ',⍕wres
     :EndSelect
   :Case 100 ⍝ Time out - put any "housekeeping" code here
   :Case 1010 ⍝ Object Not found
     ##.Output'Object ''',name,''' has been closed - Web Server shutting down'
     :Return
   :Else
     ##.Output'#.DRC.Wait failed:'
     ##.Output wres
     ∘ ⍝ intentional error
   :EndSelect
   :If 0<⎕NC'##.STOP'
     :If ##.STOP≡1
       stop←1
     :EndIf
   :EndIf
 :EndWhile
 {}##.DRC.Close name
 ##.Output'Web server ''',name,''' stopped '
∇

∇ r←SpaceName cmd
                    ⍝ Generate namespace name from rpc command name
 r←'Common.C',Subst(2⊃{1↓¨('.'=⍵)⊂⍵}'.',cmd)'-=' '_∆'
∇

∇ r←Subst arg;i;m;str;c;rep
                    ⍝ Substictute character c in str with rep
 str c rep←arg
 i←c⍳str
 m←i≤⍴c
 (m/str)←rep[m/i]
 r←str
∇

∇ r←TimeServer(CMD BUF);t
                    ⍝ Example function for "RPC Server".
     
                    ⍝ Needs to return:
                    ⍝  [1] - (charvec) HTTP status code.         This can be 0 to just mean standard success.
                    ⍝  [2] - (charvec) Additional HTTP headers.  If none, just set to ''.
                    ⍝  [3] - (charvec) HTTP content.             If none, just set to ''.
     
 :If (⊂##.HTTPUtils.lc CMD.Command)∊'get' 'post'
   t←,'ZI2,<:>,ZI2,<:>,ZI2'⎕FMT 1 3⍴3↓⎕TS
   r←0 ''('The time is ',t,' and you asked for the page:',CMD.Page)
     
 :Else
   r←('500 Invalid command: ',CMD.Command)'' ''
 :EndIf
∇

∇ z←ToRaw z;⎕IO
 :If ⊃80≠⎕DR' '
   ⎕IO←0
   z←(⎕NXLATE 0)[⎕AV⍳z]
 :Else
   z←8 int ⎕UCS z ⍝ 8-bit signed integers
 :EndIf
∇

 int←{ ⍝ Signed from unsigned integer.
   ↑⍵{(⍺|⍵+⍺⍺)-⍵}/2*⍺-0 1
 }

 uns←{ ⍝ Unsigned from signed integer.
   (2*⍺)|⍵
 }

:EndNamespace 

:Namespace BuildCertDir

      base64←{⎕IO ⎕ML←0 1             ⍝ Base64 encoding and decoding as used in MIME.
     
          chars←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
          bits←{,⍉(⍺⍴2)⊤⍵}                   ⍝ encode each element of ⍵ in ⍺ bits,
                                       ⍝   and catenate them all together
          part←{((⍴⍵)⍴⍺↑1)⊂⍵}                ⍝ partition ⍵ into chunks of length ⍺
     
          0=2|⎕DR ⍵:2∘⊥∘(8∘↑)¨8 part{(-8|⍴⍵)↓⍵}6 bits{(⍵≠64)/⍵}chars⍳⍵
                                       ⍝ decode a string into octets
     
          four←{                             ⍝ use 4 characters to encode either
              8=⍴⍵:'=='∇ ⍵,0 0 0 0           ⍝   1,
              16=⍴⍵:'='∇ ⍵,0 0               ⍝   2
              chars[2∘⊥¨6 part ⍵],⍺          ⍝   or 3 octets of input
          }
          cats←⊃∘(,/)∘((⊂'')∘,)              ⍝ catenate zero or more strings
          cats''∘four¨24 part 8 bits ⍵
      }

    split←{1↓¨(⍺=⍺,⍵)⊂⍺,⍵}

    ∇ r←CopyCertificationChainFromStore(cert path);trustroot;trustca;rix;iix;⎕IO;foundroot;current
⍝ Follow certificate chain from "cert" until a root certificate is found,
⍝ Writing CER files for each cert in chain to "path"
     
      ⎕IO←1
     
      trustroot←#.DRC.X509Cert.ReadCertFromStore'root'
      trustca←#.DRC.X509Cert.ReadCertFromStore'CA'
      r←,current←cert
     
      :Repeat
          :If foundroot←(⍴trustroot)≥rix←trustroot.Formatted.Subject⍳⊂current.Formatted.Issuer
   ⍝ we have found the root cert
              (current←rix⊃trustroot)SaveAsCER path
     
          :ElseIf (⍴trustca)≥iix←trustca.Formatted.Subject⍳⊂current.Formatted.Issuer
   ⍝ we have found an intermediate  cert
              (current←iix⊃trustca)SaveAsCER path
          :Else
              'Unable to reach a root certificate'⎕SIGNAL 999
          :EndIf
          r,←⊂current
     
      :Until foundroot
    ∇

    ∇ r←items GetDN DN;secs
      secs←'='split¨','split DN
      r←2⊃¨(secs,⊂'' '')[(1⊃¨secs)⍳items]
    ∇

    ∇ r←cert SaveAsCER path;data;tn;name;filename
⍝ Save a X509 certificate as a CER file
     
      name←⊃(⊂,'CN')GetDN cert.Formatted.Subject
      filename←path,name,'.cer'
      data←⊃,/('X509 CERTIFICATE'{pre←{'-----',⍺,' ',⍵,'-----'} ⋄ (⊂'BEGIN'pre ⍺),⍵,⊂'END'pre ⍺}↓64{s←(⌈(⍴⍵)÷⍺),⍺ ⋄ s⍴(×/s)↑⍵}base64 cert.Cert),¨⊂⎕UCS 10 13
⍝ remember to create the directory
      :Trap 22 ⋄ tn←filename ⎕NCREATE 0
      :Else ⋄ tn←filename ⎕NTIE 0 ⋄ 0 ⎕NRESIZE tn
      :EndTrap
      data ⎕NAPPEND tn 80
      ⎕NUNTIE tn
    ∇


    ∇ dir BuildCertChain url;server;port;r;pc;primary
  ⍝ dir - the folder in which to save the server's public certificate chain
  ⍝ url - the URL:port for the server (do not prepend http://)
      'DRC'⎕CY'conga'
      {}DRC.Init''
      server port←2↑'' '443'{⍵,(⍴⍵)↓⍺}':'split url
      :Trap 0
          #.Files.MkDir dir
          'Unable to find or create folder'⎕SIGNAL(~#.Files.DirExists dir)/22
      :Else
          ↑⎕DM
          →0
      :EndTrap
      port←2⊃⎕VFI⍕port
⍝ this should give us a secure connection to the server but 32 means that the server certificate is not validated
      {}DRC.Clt'C1'server port('X509'(⎕NEW DRC.X509Cert))('SSLValidation' 32)
⍝ get the server certificate
      r←DRC.GetProp'C1' 'PeerCert'
      primary←1⊃2⊃r    ⍝ lets take the first of the two certificates
      pc←⊃⌽primary.Chain
⍝ Close connection
      {}DRC.Close'C1'
      CopyCertificationChainFromStore pc dir
     
      ⎕←'Remember to provide "',dir,'" as the RootCertPath argument.'
    ∇

:EndNamespace