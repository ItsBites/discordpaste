import 'package:polymer/polymer.dart';
import 'dart:html';
import 'dart:async';
import 'tab.dart';

@CustomTag('h-accordion')
class AccordionComponent extends PolymerElement {
  
  @published String selection = 'single';
  @observable List<TabModel> tabs = toObservable([]);
  
  AccordionComponent.created() : super.created();
  
  @override
  void attached() {
    super.attached();
    
    Timer.run(() {
      ContentElement content = $['hidden'].querySelector('content');
      List tabComponents = content.getDistributedNodes();
      tabs = toObservable(
        tabComponents
          .where((Node node) => node is TabComponent)
          .map((TabComponent component) => component.model)
          .toList(growable: false)
      );
      $['hidden'].children.clear();
      
      _selectFirstTab();
    });
  }
  
  void onHeaderMouseOver(MouseEvent event, var detail, Element target) {
    event.preventDefault();
    
    TabModel tab = tabs[((target.parent.children.indexOf(target) - 1) / 2).floor()];
    
    if (tab.selected || tab.disabled || tab.closed) {
      return;
    }
    
    target.classes.add('hover');
  }
  
  void onHeaderMouseOut(MouseEvent event, var detail, Element target) {
    event.preventDefault();
    
    target.classes.remove('hover');
  }
  
  void onHeaderClicked(MouseEvent event, var detail, Node target) {
    event.preventDefault();
    
    int tabHeaderIndex = ((target.parent.children.indexOf(target) - 1) / 2).floor();
    int tabContentIndex = target.parent.children.indexOf(target) + 1;
    
    TabModel tab = tabs[tabHeaderIndex];
    DivElement tabContent = target.parent.children[tabContentIndex];
    Element tabContentTemplate = tabContent.children[0].shadowRoot.children[0];
    
    if (tab.disabled) {
      return;
    }
    
    if (tab.selected) {
      _closeTab(tabContent, tabContentTemplate, tab);
    }
    else {
      if (selection == 'single') {
        for (int i = 0; i < tabs.length; i++) {
          if (tabs[i].selected) {
            _closeTab(target.parent.children[(i + 1) * 2], target.parent.children[(i + 1) * 2].children[0].shadowRoot.children[0], tabs[i]);
          }
        }
      }
      
      _openTab(tabContent, tabContentTemplate, tab);
    }
  }
  
  void _openTab(DivElement tabContent, Element tabContentTemplate, TabModel tab) {
    _getTabHeight(tabContentTemplate, $['hidden']).then((int height) {
      tabContent.style
        ..maxHeight = '${height}px'
        ..paddingTop = '5px'
        ..paddingBottom = '5px';
      new Timer(const Duration(milliseconds: 500), () {
        tab.selected = true;
        this.dispatchEvent(new CustomEvent('selected', detail: tab));
      });
    });
  }
  
  void _closeTab(DivElement tabContent, Element tabContentTemplate, TabModel tab) {
    _getTabHeight(tabContentTemplate, $['hidden2']).then((int height) {
      tabContent.style.maxHeight = '${height}px';
      new Timer(const Duration(milliseconds: 50), () {
        tabContent.style
          ..maxHeight = '0'
          ..paddingTop = '0'
          ..paddingBottom = '0';
        new Timer(const Duration(milliseconds: 500), () {
          tab.selected = false;
          this.dispatchEvent(new CustomEvent('deselected', detail: tab));
        });
      });
    });
  }
  
  Future<int> _getTabHeight(Element div, DivElement hiddenElement) {
    Completer completer = new Completer();
    
    hiddenElement.style.display = 'block';
    Element clone = div.clone(true);
    clone.classes.remove('hidden');
    clone.style.height = 'auto';
    hiddenElement.children.add(clone);
    
    new Future.delayed(new Duration(milliseconds: 50), () {
      completer.complete(hiddenElement.clientHeight);
      clone.remove();
      hiddenElement.style.display = 'none';
    });
    
    return completer.future;
  }
  
  void _selectFirstTab() {
    if (tabs.any((TabModel tab) => tab.selected)) {
      return;
    }
    
    TabModel tab = tabs.firstWhere((TabModel tabModel) => !tabModel.disabled, orElse: () => null);
    
    if (tab != null) {
      tab.selected = true;
    }
  }
  
}

import 'package:polymer/polymer.dart';
import 'dart:html';
import 'dart:async';
import 'autocomplete/data.dart';
import '../common/reflection.dart' as reflection;

@CustomTag('h-autocomplete')
class AutocompleteComponent extends PolymerElement {
  
  @published int maxResults = 0;
  @published int delay = 1000;
  @published String property;
  @published List data = toObservable([]);
  @published String source;
  
  @observable List suggestions = toObservable([]);
  @observable String value = '';
  @observable String template;
  
  AutocompleteDataFetcher _dataFetcher;
  
  static const int CLIENT_STRING = 0;
  static const int SERVER_STRING = 1;
  static const int CLIENT_OBJECT_TEMPLATE = 2;
  static const int CLIENT_OBJECT_NOTEMPLATE = 3;
  static const int SERVER_OBJECT_TEMPLATE = 4;
  static const int SERVER_OBJECT_NOTEMPLATE = 5;
  
  int get _mode {
    if (property == null && _dataFetcher is AutocompleteClientDataFetcher) {
      return CLIENT_STRING;
    }
    else if (property == null && _dataFetcher is AutocompleteServerDataFetcher) {
      return SERVER_STRING;
    }
    else if (property != null && _dataFetcher is AutocompleteClientObjectDataFetcher && template != null) {
      return CLIENT_OBJECT_TEMPLATE;
    }
    else if (property != null && _dataFetcher is AutocompleteClientObjectDataFetcher && template == null) {
      return CLIENT_OBJECT_NOTEMPLATE;
    }
    else if (property != null && _dataFetcher is AutocompleteServerObjectDataFetcher && template != null) {
      return SERVER_OBJECT_TEMPLATE;
    }
    else if (property != null && _dataFetcher is AutocompleteServerObjectDataFetcher && template == null) {
      return SERVER_OBJECT_NOTEMPLATE;
    }
    else {
      throw new UnsupportedError('Unsupported autocomplete mode!');
    }
  }
  
  AutocompleteComponent.created() : super.created();
  
  @override
  void attached() {
    super.attached();
    
    List<Element> children = $['hidden'].querySelector('content').getDistributedNodes().where((Node node) => node is Element).toList(growable: false);
    
    if (children.isNotEmpty) {
      template = children.first.parent.innerHtml;
    }
    
    _refreshSuggestionFetcher();
    
    $['hidden'].remove();
  }
  
  void onContainerKeyUp(KeyboardEvent event) {
    // Not enter, up or down arrow
    if (![13, 38, 40].contains(event.which)) {
      String query = value;
      
      if (query == '') {
        suggestions.clear();
        $['suggestion-container'].classes.add('hidden');
        return;
      }
      
      new Future.delayed(new Duration(milliseconds: delay), () {
        if (query != value) {
          // Cancelled because query string changed
          return;
        }
        
        _dataFetcher.fetchSuggestions(query).then((List<Object> suggestions) {
          if ([CLIENT_OBJECT_NOTEMPLATE, SERVER_OBJECT_NOTEMPLATE].contains(_mode)) {
            this.suggestions = toObservable(
              suggestions.map((Object item) => reflection.getPropertyValue(item, property))
                         .toList(growable: false)
            );
          }
          else {
            this.suggestions = toObservable(suggestions);
          }
          
          $['suggestion-container'].classes.remove('hidden');
        }).catchError((Object error) => print("An error occured: $error"));
      });
    }
    
    if (![8, 16, 17, 18, 35, 36, 37, 39, 46].contains(event.which)) {
      // Same as in masked input (placeCursor)
      $['input'].selectionStart = value.length;
    }
  }
  
  void onSuggestionMouseOver(MouseEvent event, var detail, Element target) {
    target.classes.add('hover');
  }
  
  void onSuggestionMouseOut(MouseEvent event, var detail, Element target) {
    target.classes.remove('hover');
  }
  
  void onSuggestionClicked(MouseEvent event, var detail, Element target) {
    if ([CLIENT_OBJECT_TEMPLATE, SERVER_OBJECT_TEMPLATE].contains(_mode)) {
      int index = target.parent.children.indexOf(target) - 1;
      Object item = suggestions[index];
      value = reflection.getPropertyValue(item, property);
    }
    else {
      value = target.text.trim();
    }
    
    suggestions.clear();
    $['suggestion-container'].classes.add('hidden');
    
    this.dispatchEvent(new Event('valuechanged'));
  }
  
  void _refreshSuggestionFetcher() {
    if (source != null) {
      // URL
      Uri serviceURL = Uri.parse(source);
      
      if (property == null) {
        _dataFetcher = new AutocompleteServerDataFetcher(serviceURL, maxResults);
      }
      else {
        _dataFetcher = new AutocompleteServerObjectDataFetcher(serviceURL, property, maxResults);
      }
    }
    else {
      if (data.first is String) {
        // List of Strings
        _dataFetcher = new AutocompleteClientDataFetcher(maxResults, data);
      }
      else {
        // List of Objects
        _dataFetcher = new AutocompleteClientObjectDataFetcher(maxResults, data, property);
      }
    }
  }
  
}

library speaker_client;

import 'dart:html';
import 'dart:convert';
import 'dart:async';

class SpeakerClient {
  WebSocket _socket;
  List<int> _sockets;
  int _self;

  var _connections = new Map<int,RtcPeerConnection>();
  var _data = new Map<int,RtcDataChannel>();
  var _streams = new List<MediaStream>();

  var _messageController = new StreamController();
  Stream _messages;
  Stream _messageStream;

  var _iceServers = {
    'iceServers': [{
      'url': 'stun:stun.l.google.com:19302'
    }]
  };

  var _dataConfig = {
    'optional': [{
      'RtpDataChannels': true
    }, {
      'DtlsSrtpKeyAgreement': true
    }]
  };

  /* dart2js doesn't do recursive convertDartToNative_Dictionary()
   * and it fails in Chrome
   * so I had to remove constraints for now
  var _constraints = {
    'optional': [],
    'mandatory': {
      'OfferToReceiveAudio': true,
      'OfferToReceiveVideo': true
    }
  };
  */

  var _constraints = {};

  SpeakerClient(url, { room: '' }): _socket = new WebSocket(url) {
    _messageStream = _messageController.stream.asBroadcastStream();

    _socket.onOpen.listen((e){
      _send('join', {
        'room': room
      });
    });

    _socket.onClose.listen((e){});

    _messages = _socket.onMessage.map((e) => JSON.decode(e.data));

    onPeers.listen((message) {
      _self = message['you'];
      _sockets = message['connections'];
    });

    onCandidate.listen((message) {
      var candidate = new RtcIceCandidate({
        'sdpMLineIndex': message['label'],
        'candidate': message['candidate']
      });

      _connections[message['id']].addIceCandidate(candidate);
    });

    onNew.listen((message) {
      var id = message['id'];
      var pc = _createPeerConnection(message['id']);

      _sockets.add(id);
      _connections[id] = pc;
      _streams.forEach((s) {
        pc.addStream(s);
      });
    });

    onLeave.listen((message) {
      var id = message['id'];
      _connections.remove(id);
      _data.remove(id);
      _sockets.remove(id);
    });

    onOffer.listen((message) {
      var pc = _connections[message['id']];
      pc.setRemoteDescription(new RtcSessionDescription(message['description']));
      _createAnswer(message['id'], pc);
    });

    onAnswer.listen((message) {
      var pc = _connections[message['id']];
      pc.setRemoteDescription(new RtcSessionDescription(message['description']));
    });
  }

  get onOffer => _messages.where((m) => m['type'] == 'offer');

  get onAnswer => _messages.where((m) => m['type'] == 'answer');

  get onCandidate => _messages.where((m) => m['type'] == 'candidate');

  get onNew => _messages.where((m) => m['type'] == 'new');

  get onPeers => _messages.where((m) => m['type'] == 'peers');

  get onLeave => _messages.where((m) => m['type'] == 'leave');

  get onAdd => _messageStream.where((m) => m['type'] == 'add');

  get onRemove => _messageStream.where((m) => m['type'] == 'remove');

  get onData => _messageStream.where((m) => m['type'] == 'data');

  createStream({ audio: false, video: false }) {
    var completer = new Completer<MediaStream>();

    window.navigator.getUserMedia(audio: audio, video: video).then((stream) {
      var video = new VideoElement()
        ..autoplay = true
        ..src = Url.createObjectUrl(stream);

      _streams.add(stream);

      _sockets.forEach((s) {
        _connections[s] = _createPeerConnection(s);
      });

      _streams.forEach((s) {
        _connections.forEach((k, c) => c.addStream(s));
      });

      _connections.forEach((s, c) => _createDataChannel(s, c));

      _connections.forEach((s, c) => _createOffer(s, c));

      completer.complete(stream);
    });

    return completer.future;
  }

  send(data) {
    _data.forEach((k, d) {
      d.send(data);
    });
  }

  _createPeerConnection(id) {
    var pc = new RtcPeerConnection(_iceServers, _dataConfig);

    pc.onIceCandidate.listen((e){
      if (e.candidate != null) {
        _send('candidate', {
          'label': e.candidate.sdpMLineIndex,
          'id': id,
          'candidate': e.candidate.candidate
        });
      }
    });

    pc.onAddStream.listen((e) {
      _messageController.add({
        'type': 'add',
        'id': id,
        'stream': e.stream
      });
    });

    pc.onRemoveStream.listen((e) {
      _messageController.add({
        'type': 'remove',
        'id': id,
        'stream': e.stream
      });
    });

    pc.onDataChannel.listen((e) {
      _addDataChannel(id, e.channel);
    });

    return pc;
  }

  _addDataChannel(id, RtcDataChannel channel) {
    channel.onOpen.listen((e){});

    channel.onMessage.listen((e){
      _messageController.add({
        'type': 'data',
        'id': id,
        'data': e.data
      });
    });

    channel.onClose.listen((e){});

    _data[id] = channel;
  }

  _createDataChannel(id, RtcPeerConnection pc, { label: 'fileTransfer' }) {
    var channel = pc.createDataChannel(label, { 'reliable': false });
    _addDataChannel(id, channel);
  }

  _createOffer(int socket, RtcPeerConnection pc) {
    pc.createOffer(_constraints).then((RtcSessionDescription s) {
      pc.setLocalDescription(s);
      _send('offer', {
          'id': socket,
          'description': {
            'sdp': s.sdp,
            'type': s.type
          }
      });
    });
  }

  _createAnswer(int socket, RtcPeerConnection pc) {
    pc.createAnswer(_constraints).then((RtcSessionDescription s) {
      pc.setLocalDescription(s);
      _send('answer', {
          'id': socket,
          'description': {
            'sdp': s.sdp,
            'type': s.type
          }
      });
    });
  }

  _send(event, data) {
    data['type'] = event;
    _socket.send(JSON.encode(data));
  }
}

library speaker_server;

import 'dart:io';
import 'dart:async';
import 'dart:convert';

class SpeakerServer {
  HttpServer _server;

  var _sockets = new Map<int,WebSocket>();
  var _rooms = new Map<String,List<int>>();

  var _messageController = new StreamController();
  Stream _messages;

  SpeakerServer() {
    _messages = _messageController.stream.asBroadcastStream();

    onJoin.listen((message) {
      var socket = message['_socket'];

      if (_rooms[message['room']] == null) {
        _rooms[message['room']] = new List<int>();
      }

      _rooms[message['room']].forEach((client) {
        _sockets[client].add(JSON.encode({
          'type': 'new',
          'id': socket.hashCode
        }));
      });

      socket.add(JSON.encode({
        'type': 'peers',
        'connections': _rooms[message['room']],
        'you': socket.hashCode
      }));

      _rooms[message['room']].add(socket.hashCode);
    });

    onOffer.listen((message) {
      var socket = message['_socket'];

      var soc = _sockets[message['id']];

      soc.add(JSON.encode({
        'type': 'offer',
        'description': message['description'],
        'id': socket.hashCode
      }));
    });

    onAnswer.listen((message) {
      var socket = message['_socket'];

      var soc = _sockets[message['id']];

      soc.add(JSON.encode({
        'type': 'answer',
        'description': message['description'],
        'id': socket.hashCode
      }));
    });

    onCandidate.listen((message) {
      var socket = message['_socket'];

      var soc = _sockets[message['id']];

      soc.add(JSON.encode({
        'type': 'candidate',
        'label': message['label'],
        'candidate': message['candidate'],
        'id': socket.hashCode
      }));
    });
  }

  get onJoin => _messages.where((m) => m['type'] == 'join');

  get onOffer => _messages.where((m) => m['type'] == 'offer');

  get onAnswer => _messages.where((m) => m['type'] == 'answer');

  get onCandidate => _messages.where((m) => m['type'] == 'candidate');

  Future<SpeakerServer> listen(String host, num port) {
    return HttpServer.bind(host, port).then((HttpServer server) {
      _server = server;

      _server.transform(new WebSocketTransformer()).listen((WebSocket socket) {
        _sockets[socket.hashCode] = socket;

        socket.listen((m) {
          var message = JSON.decode(m);
          message['_socket'] = socket;
          _messageController.add(message);
        },
        onDone: () {
          int id = socket.hashCode;
          _sockets.remove(id);

          _rooms.forEach((room, clients) {
            if (clients.contains(id)) {
              clients.remove(id);

              clients.forEach((client) {
                _sockets[client].add(JSON.encode({
                  'type': 'leave',
                  'id': id
                }));
              });
            }
          });
        });
      });

      return this;
    });
  }
}